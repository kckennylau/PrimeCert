/-
Copyright (c) 2025 Kenny Lau. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kenny Lau
-/

import PrimeCert.SmallPrimes
import PrimeCert.Pocklington3

/-! # Examples for prime certificates

Helpful links:
* https://www.alpertron.com.ar/ECM.HTM (integer factorisation calculator using elliptic curves)

 -/

namespace PrimeCert

theorem prime_16290860017' : Nat.Prime 16290860017 :=
  pock% [3, 29, 41, (339392917, 2, 3 ^ 4 * 29 * 41), (16290860017, 5, 339392917)]

#time
-- randomly generated 60-digit prime
theorem prime_236684654874665389773181956283167565443541280517430278333971 :
    Nat.Prime 236684654874665389773181956283167565443541280517430278333971 :=
  have prime_2 := Nat.prime_two
  have prime_3 := Nat.prime_three
  have prime_30977 :=
    pocklington_certifyKR 30977 3 (2 ^ 8) <| .base_pow prime_2
  have prime_37475912647 :=
    pocklington_certifyKR 37475912647 2 (3 ^ 2 * 30977) <|
      .step prime_30977 <| .base_pow prime_3
  have prime_40194190494937499 :=
    pocklington_certifyKR 40194190494937499 2 37475912647 <|
      .base prime_37475912647
  have prime_202676265415183426946146116291833413 :=
    pocklington_certifyKR 202676265415183426946146116291833413 2 (2 ^ 2 * 3 * 40194190494937499) <|
      .step prime_40194190494937499 <| .step prime_3 <| .base_pow prime_2
  pocklington_certifyKR _ 2 202676265415183426946146116291833413 <|
    .base prime_202676265415183426946146116291833413

-- randomly generated 100-digit prime
#time
set_option maxRecDepth 4000 in
example : Nat.Prime
    33706834100337092016588185336355794213783999136111596309066868786749483370039300586702754215489223467 := pock%
  [5, 19, (1809751, 2, 5 ^ 3 * 19), (1983088950781, 2, 1809751),
  (47118193470556561, 2, 1983088950781),
  (88792633576685840281427, 2, 47118193470556561),
  (3933488715053265001346321205182867326957, 2, 88792633576685840281427),
  (120470424957394687948621467206018925349715512075395521,
    2, 3933488715053265001346321205182867326957),
  (7333936561985354484046645851447308970826407201647529829078664035434709924691,
    2, 120470424957394687948621467206018925349715512075395521),
  (33706834100337092016588185336355794213783999136111596309066868786749483370039300586702754215489223467,
    2, 7333936561985354484046645851447308970826407201647529829078664035434709924691)]

#time
theorem prime_25519' : Nat.Prime (2 ^ 255 - 19) := pock%
  [2, 3, 7, 991,
  (8574133, 2, 2 ^ 2 * 991),
  (1919519569386763, 2, 7 * 8574133),
  (75445702479781427272750846543864801, 7, 2 ^ 5 * 3 ^ 2 * 1919519569386763),
  (74058212732561358302231226437062788676166966415465897661863160754340907,
    2, 2 * 3 * 75445702479781427272750846543864801),
  (57896044618658097711785492504343953926634992332820282019728792003956564819949,
    2, 74058212732561358302231226437062788676166966415465897661863160754340907)]

#time
set_option maxRecDepth 4000 in
set_option exponentiation.threshold 3000 in
theorem prime_448_224_1 : Nat.Prime (2^448 - 2^224 - 1) := pock%
  [2, 5, 7, 23, 67, 109, 223, 137, 223, 593, 641,
  (1979, 2, 2 * 23), (18287, 5, 223), (47497, 5, 1979), (189989, 2, 47497), (196687, 3, 2 * 223),
  (379979, 2, 189989), (1466449, 3, 137 * 223), (1609403, 2, 23 * 593), (2916841, 3, 109 * 223),
  (3402277943, 2, 1609403),
  (97859369123353, 2, 67 * 379979),
  (1469495262398780123809, 3, 7 ^ 2 * 3402277943),
  (167773885276849215533569, 3, 97859369123353),
  (726838724295606890549323807888004534353641360687318060281490199180612328166730772686396383698676545930088884461843637361053498018365439,
    2, 167773885276849215533569 * 1469495262398780123809 * 2916841 * 1466449 * 196687 * 18287 * 641)]
/-
2 × 641 × 18287 × 196687 × 1466449 × 2916841 × 6700417 × 1469495262398780123809 ×
167773885276849215533569 × 596242599987116128415063 × 37414057161322375957408148834323969
-/


-- set_option exponentiation.threshold 30000000 in
-- set_option maxRecDepth 7843 in
-- example : Nat.Prime (3 * 2 ^ 3912 + 1) :=
--   pock% [2, (127780414391497973212171930170926986757577048484820926201064729783485263494817422495127775983679039078116803697168137524940219819335799478153348592755198599590903607242050230924443865709697486743641039970666450337071378658828331722728467720393963808366917988956767802913905167890490075236068196363700359481304279948916896583006686025357237170212018946813663108217900835975808683160984117514866915965161953626338070145596982334808959718966160701183250747572515090867613655044807172211728519357721287835503689517292364425608325467094686443862517374850243698013720305871319056887431952190952721719757200172695537054790570648290887720009455171821568413052107356003828041937567129362866696549587422369864562815134637684140271767482353107080370450890024342225936273158281477009232714640818424893445193089479459814572594522258577931514012256573162006292678354475638319009668319255772179069845291474717503333030909793536116894869761453687330048252587304656806182949368202671739705463406846852567720022377005763291104588535681445561286808586673846016527511475331939430139687698419185010117348285933672139833826832898565919546377321517928825162277951756632134321102813522053716838646284289, 11, 2 ^ 1957)]


-- 2*3*2963*5246518391
-- set_option maxRecDepth 4000 in
-- -- randomly generated 400-digit prime
-- theorem prime_51901784371994996376593469309096443607802049656310744672265835489333061706192309958353814142113744294468798825333473401059915156374488690988481403600435465308741608385038409523180292859567018252541231582792453954433750832630291882984350103741541995706595413743013143909735606307833255590678810956970705688792656690429812357825838674103089651272222714758188295143293464924404598654054810425327706600013 :
--     Nat.Prime 51901784371994996376593469309096443607802049656310744672265835489333061706192309958353814142113744294468798825333473401059915156374488690988481403600435465308741608385038409523180292859567018252541231582792453954433750832630291882984350103741541995706595413743013143909735606307833255590678810956970705688792656690429812357825838674103089651272222714758188295143293464924404598654054810425327706600013 :=
--   have step₁ :=
--     pocklington_certifyKR
--       9190707666590543106337273569716401794606376377897773569408609992416360764936647858276985836464177675770752576437704111997784056488813472434296691624298628002859714881041904125087790205060245571092477382039242362931895205200931064600115547635487106810021209766255093696867003980171433366346128705070270034869854841398207057031062568937464012154836645872965165507335822025622235439
--       2
--       _
--   pocklington_certifyKR _ 2 9190707666590543106337273569716401794606376377897773569408609992416360764936647858276985836464177675770752576437704111997784056488813472434296691624298628002859714881041904125087790205060245571092477382039242362931895205200931064600115547635487106810021209766255093696867003980171433366346128705070270034869854841398207057031062568937464012154836645872965165507335822025622235439 <|
--     .base step₁


end PrimeCert

--    1, 1093, 3511
-- => 0,  546, 1755

-- #time
-- theorem wieferich_100 : ∀ n < 100, Nat.blt 1 (powModTR 4 n (n.mul 2 |>.succ |>.pow 2)) ||
--     n.beq 0 || n.beq 546 || n.beq 1755 :=
--   by decide

-- set_option maxRecDepth 10000 in
-- #time
-- #reduce Nat.rec (motive := fun _ ↦ Nat × Bool) (4001, true)
--   (fun _ ih ↦ ih.rec fun n b ↦ (n.add 2, Nat.blt 1 (powModTR 2 n.pred (n.mul n)) && b)) 1000
